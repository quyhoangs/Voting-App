composer require guzzlehttp/guzzle



Dưới đây là một ví dụ về cách bạn có thể xây dựng một lớp xử lý API trong Laravel:
Tạo một file trong thư mục app/Services hoặc app/Libraries, ví dụ: ApiService.php.
Định nghĩa các phương thức để gọi các API khác nhau. Ví dụ:

namespace App\Services;

use GuzzleHttp\Client;

class ApiService
{
    protected $client;

    public function __construct(Client $client)
    {
        $this->client = $client;
    }

    public function getUser($userId)
    {
        $response = $this->client->get("https://api.example.com/users/{$userId}");
        return json_decode($response->getBody(), true);
    }

    public function createOrder($data)
    {
        $response = $this->client->post("https://api.example.com/orders", [
            'json' => $data
        ]);
        return json_decode($response->getBody(), true);
    }
}

Trong ví dụ này, chúng ta sử dụng Guzzle để gọi API và trả về kết quả dưới dạng một mảng được chuẩn hóa.
Để sử dụng lớp xử lý API này, bạn có thể inject nó vào constructor của một controller hoặc một class khác, ví dụ:

namespace App\Http\Controllers;

use App\Services\ApiService;

class UserController extends Controller
{
    protected $apiService;

    public function __construct(ApiService $apiService)
    {
        $this->apiService = $apiService;
    }

    public function show($userId)
    {
        $user = $this->apiService->getUser($userId);
        return view('users.show', compact('user'));
    }
}
Trong ví dụ này, chúng ta inject ApiService vào constructor của UserController và sử dụng phương thức getUser() để lấy thông tin của user từ API.

---------
Nếu bạn muốn đảm bảo tính bảo trì và dễ dàng sử dụng, bạn có thể định nghĩa các phương thức xử lý API để trả về một đối tượng chuẩn hóa. 
Đối tượng chuẩn hóa này có thể được định nghĩa dưới dạng một mảng hoặc một đối tượng PHP, và chứa các thông tin cần thiết từ response của API 
(ví dụ: mã lỗi, thông báo lỗi, dữ liệu trả về từ API...). Ví dụ:

namespace App\Services;

use GuzzleHttp\Client;

class ApiService
{
    protected $client;

    public function __construct(Client $client)
    {
        $this->client = $client;
    }

    public function getUser($userId)
    {
        $response = $this->client->get("https://api.example.com/users/{$userId}");

        $data = json_decode($response->getBody(), true);
        $error = isset($data['error']) ? $data['error'] : null;
        $message = isset($data['message']) ? $data['message'] : null;
        $user = isset($data['user']) ? $data['user']        : null;

        return [
            'error' => $error,
            'message' => $message,
            'user' => $user
        ];
    }

    public function createOrder($data)
    {
        $response = $this->client->post("https://api.example.com/orders", [
            'json' => $data
        ]);

        $data = json_decode($response->getBody(), true);
        $error = isset($data['error']) ? $data['error'] : null;
        $message = isset($data['message']) ? $data['message'] : null;
        $orderId = isset($data['orderId']) ? $data['orderId'] : null;

        return [
            'error' => $error,
            'message' => $message,
            'orderId' => $orderId
        ];
    }
}

Trong ví dụ này, chúng ta trả về một mảng với các thông tin cần thiết từ response của API.
Nếu có lỗi, chúng ta sẽ trả về mã lỗi và thông báo lỗi, nếu thành công, chúng ta sẽ trả về dữ liệu cần thiết từ API.
Để sử dụng đối tượng chuẩn hóa này, bạn có thể thực hiện như sau:

$userData = $this->apiService->getUser($userId);
if ($userData['error']) {
    return redirect()->back()->withErrors([$userData['message']]);
}
$user = $userData['user'];

Nếu bạn muốn sử dụng cách xử lý response của riêng mình, bạn có thể override phương thức send() của Guzzle để thêm các xử lý khác nhau cho từng loại response. Ví dụ:

namespace App\Services;

use GuzzleHttp\Client;
use GuzzleHttp\Exception\RequestException;
use Psr\Http\Message\ResponseInterface;

class ApiService
{
    protected $client;

    public function __construct(Client $client)
    {
        $this->client = $client;
    }

    public function send($method, $uri = '', array $options = [])
    {
        try {
            $response = $this->client->request($method, $uri, $options);
        } catch (RequestException $e) {
            $response = $e->getResponse();
            $error = $response ? $response->getStatusCode() : $e->getCode();
            $message = $response ? $response->getReasonPhrase() : $e->getMessage();
            $data = null;
            return [
                'error' => $error,
                'message' => $message,
                'data' => $data
            ];
        }

        $contentType = $response->getHeaderLine('Content-Type');
        $body = $response->getBody();

        if (strpos($contentType, 'application/json') !== false) {
            $data = json_decode($body, true);
        } elseif (strpos($contentType, 'text/html') !== false) {
            $data = (string)$body;
        } else {
            $data = $body;
        }

        return [
            'error' => null,
            'message' => null,
            'data' => $data
        ];
    }

    public function getUser($userId)
    {
        $response = $this->send('GET', "https://api.example.com/users/{$userId}");
        if ($response['error']) {
            return [
                            'error' => $response['error'],
            'message' => $response['message'],
            'user' => null
        ];
        }

        $userData = $response['data'];
        $user = isset($userData['user']) ? $userData['user'] : null;

        return [
            'error' => null,
            'message' => null,
            'user' => $user
        ];
    }

    public function createOrder($data)
    {
        $response = $this->send('POST', "https://api.example.com/orders", [
            'json' => $data
        ]);
        if ($response['error']) {
            return [
                'error' => $response['error'],
                'message' => $response['message'],
                'orderId' => null
            ];
        }

        $orderData = $response['data'];
        $orderId = isset($orderData['orderId']) ? $orderData['orderId'] : null;

        return [
            'error' => null,
            'message' => null,
            'orderId' => $orderId
        ];
    }
}

Ở ví dụ này, chúng ta sử dụng phương thức send() để gửi các request, và xử lý response theo cách mà chúng ta định nghĩa.
Phương thức send() này sử dụng phương thức request() của Guzzle để gửi request, 
và xử lý response dựa trên Content-Type của response. Nếu Content-Type là application/json, 
chúng ta sẽ decode JSON thành một mảng dữ liệu, và nếu Content-Type là text/html, chúng ta sẽ trả về dữ liệu dạng string.

Cuối cùng, để sử dụng đối tượng ApiService này, bạn có thể sử dụng dependency injection để inject vào controller hoặc các đối tượng khác. Ví dụ:

namespace App\Http\Controllers;

use App\Services\ApiService;

class UserController extends Controller
{
    protected $apiService;

    public function __construct(ApiService $apiService)
    {
        $this->apiService = $apiService;
    }

    public function index()
    {
        $userData = $this->apiService->getUser($userId);
        if ($userData['error']) {
            return redirect()->back()->withErrors([$userData['message']]);
        }
        $user = $userData['user'];
        return view('users.index', compact('user'));
    }
}
Chúng ta sử dụng dependency injection để inject ApiService vào trong constructor của UserController, 
và sau đó sử dụng đối tượng ApiService để gọi các phương thức của API. Nếu có lỗi, chúng ta redirect trở lại trang trước với các thông báo lỗi, 
nếu không có lỗi, chúng ta trả về view với dữ liệu user.

Nếu bạn không khởi tạo đối tượng ApiService trong constructor của UserController,
thì bạn có thể khởi tạo nó trực tiếp trong phương thức index() bằng cách sử dụng từ khóa new. Ví dụ:

namespace App\Http\Controllers;

use App\Services\ApiService;

class UserController extends Controller
{
    public function index()
    {
        $apiService = new ApiService();
        $userData = $apiService->getUser($userId);
        if ($userData['error']) {
            return redirect()->back()->withErrors([$userData['message']]);
        }
        $user = $userData['user'];
        return view('users.index', compact('user'));
    }
}




