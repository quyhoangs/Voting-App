namespace App\Http\Requests;

use Illuminate\Contracts\Validation\Validator;
use Illuminate\Foundation\Http\FormRequest;
use Illuminate\Http\Exceptions\HttpResponseException;
use Illuminate\Http\JsonResponse;

class MyRequest extends FormRequest
{
    protected function failedValidation(Validator $validator)
    {
        $errors = $validator->errors();
        $errorCodes = [];

        foreach ($errors->keys() as $key) {
            $errorCode = $this->getErrorCodeForField($key);
            $errorMessage = $errors->first($key);
            $errorCodes[] = ['code_custom' => $errorCode, 'message' => $errorMessage];
        }

        $response = [
            'status' => 400,
            'message' => 'Bad Request',
            'errors' => $errorCodes,
            'extra_option_1' => 'value_1',
            'extra_option_2' => 'value_2',
            // ...
        ];

        throw new HttpResponseException(response()->json($response, JsonResponse::HTTP_UNPROCESSABLE_ENTITY));
    }

    private function getErrorCodeForField($fieldName)
    {
        // Mapping error codes to field names
        $errorCodes = [
            'field1' => 1001,
            'field2' => 1002,
            'field3' => 1003,
            // ...
        ];

        return $errorCodes[$fieldName] ?? 0;
    }

    public function rules()
    {
        return [
            'field1' => 'required',
            'field2' => 'required',
            'field3' => 'required',
            // ...
        ];
    }
}


Hoặc 

namespace App\Http\Requests;

use Illuminate\Contracts\Validation\Validator;
use Illuminate\Foundation\Http\FormRequest;
use Illuminate\Http\Exceptions\HttpResponseException;
use Illuminate\Http\JsonResponse;

class MyRequest extends FormRequest
{
    protected function failedValidation(Validator $validator)
    {
        $errors = $validator->errors();
        $errorCodes = [];

        foreach ($errors->keys() as $key) {
            $errorCode = $this->getErrorCodeForField($key);
            $errorMessage = $errors->first($key);
            $errorCodes[] = ['code_custom' => $errorCode, 'message' => $errorMessage];
        }

        throw new HttpResponseException(response()->json(['errors' => $errorCodes], JsonResponse::HTTP_UNPROCESSABLE_ENTITY));
    }

    private function getErrorCodeForField($fieldName)
    {
        // Mapping error codes to field names
        $errorCodes = [
            'field1' => 1001,
            'field2' => 1002,
            'field3' => 1003,
            // ...
        ];

        return $errorCodes[$fieldName] ?? 0;
    }

    public function rules()
    {
        return [
            'field1' => 'required',
            'field2' => 'required',
            'field3' => 'required',
            // ...
        ];
    }
}


namespace App\Helpers;

use Illuminate\Support\Facades\Log;

class ApiLogger
{
    public static function startLog($functionName, $params, $ip)
    {
        Log::info('START LOG - Function name: ' . $functionName . ', Params: ' . json_encode($params) . ', IP: ' . $ip);
    }

    public static function endLog($functionName, $params, $ip)
    {
        Log::info('END LOG - Function name: ' . $functionName . ', Params: ' . json_encode($params) . ', IP: ' . $ip);
    }

    public static function logInfo($message, $functionName, $params, $ip)
    {
        Log::info('INFO - Function name: ' . $functionName . ', Params: ' . json_encode($params) . ', IP: ' . $ip . ', Message: ' . $message);
    }

    public static function logWarning($message, $functionName, $params, $ip)
    {
        Log::warning('WARNING - Function name: ' . $functionName . ', Params: ' . json_encode($params) . ', IP: ' . $ip . ', Message: ' . $message);
    }

    public static function logError($message, $functionName, $params, $ip)
    {
        Log::error('ERROR - Function name: ' . $functionName . ', Params: ' . json_encode($params) . ', IP: ' . $ip . ', Message: ' . $message);
    }
}


namespace App\Http\Requests;

use Illuminate\Foundation\Http\FormRequest;
use App\Helpers\ApiLogger;

class YourRequest extends FormRequest
{
    public function authorize()
    {
        return true;
    }

    public function rules()
    {
        $functionName = __METHOD__;
        $params = $this->all();
        $ip = $this->ip();

        ApiLogger::startLog($functionName, $params, $ip);

        return [
            'param1' => 'required',
            'param2' => 'numeric',
        ];
    }

    public function withValidator($validator)
    {
        if ($validator->fails()) {
            $functionName = __METHOD__;
            $params = $this->all();
            $ip = $this->ip();
            $errors = $validator->errors();

            ApiLogger::logWarning('Validation errors', $functionName, $params, $ip);
            ApiLogger::logInfo('Validation errors', $functionName, $params, $ip);
        } else {
            $functionName = __METHOD__;
            $params = $this->all();
            $ip = $this->ip();

            ApiLogger::logInfo('Validation passed',
            
            
            
            
            
use GuzzleHttp\Client;

class YourController extends Controller
{
    public function yourMethod()
    {
        $response = $this->callExternalApi('http://api.example.com/endpoint', 'GET');

        // xử lý kết quả trả về từ API
    }

    private function callExternalApi($url, $method, $data = null)
    {
        $client = new Client();

        $options = [
            'headers' => [
                // thêm thông tin header nếu cần
            ],
            'http_errors' => false,
        ];

        if ($data) {
            $options['json'] = $data;
        }

        $response = $client->request($method, $url, $options);

        return $response;
    }
}

  http_errors là một tùy chọn (option) trong Guzzle HTTP Client. Khi http_errors được đặt là false, Guzzle sẽ không ném ra các ngoại lệ (exceptions) khi gặp phản hồi HTTP có mã trạng thái lỗi (không phải 2xx). Thay vào đó, phản hồi sẽ được trả về dưới dạng đối tượng Response.

Nếu không có tùy chọn này hoặc được đặt là true, khi gặp một phản hồi HTTP có mã trạng thái lỗi, Guzzle sẽ ném ra một ngoại lệ GuzzleHttp\Exception\RequestException, bạn sẽ phải xử lý nó bằng cách bắt ngoại lệ.

Việc đặt http_errors là false có thể hữu ích trong một số trường hợp, ví dụ như khi bạn muốn xử lý phản hồi HTTP lỗi một cách tự do, hoặc khi phản hồi HTTP lỗi là một phản hồi hợp lệ trong trường hợp ngoại lệ. Tuy nhiên, bạn nên cẩn trọng khi sử dụng tùy chọn này, vì nó có thể làm giảm tính bảo mật của ứng dụng nếu không được sử dụng đúng cách.

Trong trường hợp ngoại lệ, khi http_errors được đặt là true, Guzzle sẽ ném ra một ngoại lệ GuzzleHttp\Exception\RequestException. Ngoại lệ này có thể được bắt và xử lý để giải quyết các vấn đề liên quan đến kết nối API.

Ở đây, trong phương thức yourMethod(), chúng ta sử dụng try...catch để bắt ngoại lệ RequestException nếu có lỗi khi gửi yêu cầu tới API. Sau đó, chúng ta có thể xử lý lỗi trong khối catch và đưa ra các biện pháp khắc phục hoặc thông báo cho người dùng.

Vì vậy, bạn nên cẩn thận khi xử lý ngoại lệ trong trường hợp http_errors được đặt là true, vì nó có thể tạo ra lỗi không mong muốn nếu không được xử lý đúng cách.


use GuzzleHttp\Client;
use GuzzleHttp\Exception\RequestException;

class YourController extends Controller
{
    public function yourMethod()
    {
        try {
            $response = $this->callExternalApi('http://api.example.com/endpoint', 'GET');

            // xử lý kết quả trả về từ API
        } catch (RequestException $e) {
            // xử lý lỗi nếu có
        }
    }

    private function callExternalApi($url, $method, $data = null)
    {
        $client = new Client();

        $options = [
            'headers' => [
                // thêm thông tin header nếu cần
            ],
            'http_errors' => true,
        ];

        if ($data) {
            $options['json'] = $data;
        }

        $response = $client->request($method, $url, $options);

        return $response;
    }
}

